#include <iostream>
#include <vector>
using namespace std;

// Function to partition the array by taking leftmost element as pivot and return partition index
int partition(int low, int high, vector<int> &arr)
{
    // Initialize pivot as leftmost element
    int pivot = arr[low];
    int i = low + 1;
    int j = high;

    while (i <= j)
    {
        // Find the element larger than the pivot
        while (arr[i] <= pivot && i <= high)
        {
            i++;
        }

        // Find the element smaller or equal to the pivot
        while (arr[j] > pivot && i >= low + 1)
        {
            j--;
        }

        if (i < j)
        {
            // Swap the larger element with the smaller element
            swap(arr[i], arr[j]);
        }
    }

    // Place the pivot at its correct location in sorted array
    swap(arr[low], arr[j]);

    // Return the partition index
    return j;
}

// Function to sort array using deterministic quick sort
void deterministicQuickSort(int low, int high, vector<int> &arr)
{
    // Base Case : Only single element is there, it is already sorted
    if (low >= high)
    {
        return;
    }

    // Invoke partition function which will partition the array and return the partition index
    int partioningIndex = partition(low, high, arr);

    // Ivoke deterministic quick sort function recursively for left and righ partition
    deterministicQuickSort(low, partioningIndex - 1, arr);
    deterministicQuickSort(partioningIndex + 1, high, arr);
}

// Function to randomly partition the array and return partition index
int randomPartition(int low, int high, vector<int> &arr)
{
    // Generate random index between low and high
    int randomIndex = low + rand() % (high - low + 1);

    // Swap element at random index with element at high index
    swap(arr[randomIndex], arr[low]);

    // Invoke partition function which will partition the array and return the partition index
    return partition(low, high, arr);
}

// Function to sort array using randomized quick sort
void randomizedQuickSort(int low, int high, vector<int> &arr)
{
    // Base Case : Only single element is there, it is already sorted
    if (low >= high)
    {
        return;
    }

    // Invoke random partition function which will randomly partition the array and return the partition index
    int partioningIndex = randomPartition(low, high, arr);

    // Ivoke randomized quick sort function recursively for left and righ partition
    randomizedQuickSort(low, partioningIndex - 1, arr);
    randomizedQuickSort(partioningIndex + 1, high, arr);
}

// Function for printing the array
void printArray(vector<int> arr)
{
    for (int i = 0; i < arr.size(); i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main()
{
    // Take array size as input
    int n;
    cin >> n;

    // Initialize array of size taken as input
    vector<int> arr(n);

    // Generate array elements
    for (int i = 0; i < n; i++)
    {
        arr[i] = rand() % n;
    }

    // Print array
    cout << "Original Array : ";
    printArray(arr);

    // Create copy of array
    vector<int> result1 = arr;

    // Invoke deterministic quick sort function for sorting
    deterministicQuickSort(0, n - 1, result1);

    // Print sorted array got by deterministic quick sort
    cout << "Sorted Array (Generated By Deterministic Quick Sort) : ";
    printArray(result1);

    // Create copy of array
    vector<int> result2 = arr;

    // Invoke Randomized Quick Sort function for Sorting
    randomizedQuickSort(0, n - 1, result2);

    // Print sorted array got by randomized quick sort
    cout << "Sorted Array (Generated By Randomized Quick Sort) : ";
    printArray(result2);

    return 0;
}